#ifndef CAMERA_WEBCAM
#define CAMERA_WEBCAM

#include <stdbool.h>

#ifdef __APPLE__
#include <OpenCL/cl.h>
#else
#include <CL/cl.h>
#endif

#include "common/mat.h"

#include "buffering.h"
#include "common/visionbuf.h"
#include "camera_common.h"

#define FRAME_BUF_COUNT 16

#ifdef __cplusplus
extern "C" {
#endif

typedef struct CameraState {
  int camera_id;
  
  CameraInfo ci;

  int32_t given_width;
  int32_t given_height;
  
  int frame_size;

  VisionBuf *camera_bufs;
  FrameMetadata camera_bufs_metadata[FRAME_BUF_COUNT];
  TBuffer camera_tb;

  int fps;
  int32_t fpsMin;
  int32_t fpsMax;

  float digital_gain;

  float cur_gain_frac;

  char *camId;
  int32_t captureFormat;
  int32_t orientation;

  // ndk
  ACameraManager *cameraManager;
  ACameraDevice *cameraDevice;
  ACameraCaptureSession *captureSession;
  ACaptureSessionOutputContainer *captureSessionOutputContainer;

	ACaptureRequest *capturePreviewRequest;
	ACameraOutputTarget *cameraCaptureOutputTarget;
	ACameraOutputTarget *cameraPreviewOutputTarget;
	ACaptureSessionOutput *sessionCaptureOutput;
	ACaptureSessionOutput *sessionPreviewOutput;

  ACameraDevice_StateCallbacks deviceStateCallbacks;
	ACameraCaptureSession_stateCallbacks captureSessionStateCallbacks;

  mat3 transform;
} CameraState;


typedef struct DualCameraState {
  int ispif_fd;

  CameraState rear;
  CameraState front;
} DualCameraState;

void cameras_init(DualCameraState *s);
void cameras_open(DualCameraState *s, VisionBuf *camera_bufs_rear, VisionBuf *camera_bufs_focus, VisionBuf *camera_bufs_stats, VisionBuf *camera_bufs_front);
void cameras_run(DualCameraState *s);
void cameras_close(DualCameraState *s);
void camera_autoexposure(CameraState *s, float grey_frac);
#ifdef __cplusplus
}  // extern "C"
#endif

#endif
